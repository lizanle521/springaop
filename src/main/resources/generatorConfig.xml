<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
  
  <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项  
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties          
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.  
    	注意，两个属性只能选址一个;  
    	另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
    	
    -->  
	<properties resource="./generatorConfig.properties" />  
 
  <!-- 在MBG工作的时候，需要额外加载的依赖包  
     location属性指明加载jar/zip包的全路径  -->
  <classPathEntry location="${mysql_connector_jar_location}" />  
  
  <!--   
    context:生成一组对象的环境   
    id:必选，上下文id，用于在生成错误时提示  
    defaultModelType:指定生成对象的样式  
        1，conditional：类似hierarchical；  
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；  
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)  
    targetRuntime:  
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；  
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；  
    introspectedColumnImpl：类全限定名，用于扩展MBG  
  -->  
  <context id="mysql" targetRuntime="MyBatis3">
 
     <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；  
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖  
     -->  
    <property name="autoDelimitKeywords" value="false"/>  
    <!-- 生成的Java文件的编码 -->  
    <property name="javaFileEncoding" value="UTF-8"/>  
    <!-- 格式化java代码 -->  
    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>  
    <!-- 格式化XML代码 -->  
    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
       
     <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->  
    <property name="beginningDelimiter" value="`"/>  
    <property name="endingDelimiter" value="`"/>  
    
     <commentGenerator>  
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->  
            <property name="suppressAllComments" value="true" />  
            <property name="suppressDate" value="true"/>
    </commentGenerator>
    <!--数据库链接 -->  
    <jdbcConnection connectionURL="jdbc:mysql://test.db.uuuwin.com:4417/${db_name}?useUnicode=true&amp;characterEncoding=utf8"
     driverClass="com.mysql.jdbc.Driver" 
     password="s4417.race.uw" 
     userId="race_dba_s4417" />
    
    <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和   
            NUMERIC 类型解析为java.math.BigDecimal -->  
    <javaTypeResolver>  
            <property name="forceBigDecimals" value="true" />  
    </javaTypeResolver>
    
    
     <!-- targetProject:生成PO类的位置 -->  
    <javaModelGenerator targetPackage="com.igame.dataaccess.entity"  
            targetProject="igame_entity\src\main\java">  
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，
              		最终生成的类放在这个package下，默认为false -->   
            <property name="enableSubPackages" value="true" />  
            <!-- 从数据库返回的值被清理前后的空格 -->  
            <property name="trimStrings" value="true" />  
    </javaModelGenerator>  
    
     <!-- targetProject:mapper映射文件生成的位置 --> 
    <sqlMapGenerator targetPackage="${target_package}" 
    		targetProject="${target_project_name}\src\main\java" >
    		<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，
              		最终生成的类放在这个package下，默认为false -->
    		<property name="enableSubPackages" value="true"/>
    </sqlMapGenerator>
    
    
    <!-- targetPackage：mapper接口生成的位置 -->  
    <javaClientGenerator targetPackage="${target_package}" 
    		targetProject="${target_project_name}\src\main\java" type="XMLMAPPER" >
    		<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，
              		最终生成的类放在这个package下，默认为false -->
    		<property name="enableSubPackages" value="true"/>
    		
    		<!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查  --> 
        	<property name="rootInterface" value=""/>  
    </javaClientGenerator>
    
    
    <!-- 指定数据库表 
    	 1，schema：数据库的schema；  
        2，catalog：数据库的catalog；  
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName  
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；  
        5，enableInsert（默认true）：指定是否生成insert语句；  
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；  
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；  
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；  
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；  
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；  
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；  
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；  
        13，modelType：参考context元素的defaultModelType，相当于覆盖；  
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）  
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性  
        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；  
     -->   
    <table  tableName="${table_name}" domainObjectName="${java_model_name}"
      enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false" enableUpdateByExample="false"  >    
    </table>
  </context>
</generatorConfiguration>